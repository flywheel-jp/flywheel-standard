#!/usr/bin/env python3

"""Setup developer's local machine

See: docs/local_environment.md
"""

import os
import os.path
import platform
import shutil
import subprocess
import sys
import textwrap
from typing import Optional

PROJECT_DIR = os.path.dirname(os.path.abspath(os.path.join(__file__, "..")))


def execute(command: str,
            error_message: str,
            prologue: Optional[str] = None,
            epilogue: Optional[str] = None) -> None:
    """Execute shell command.

    Raises:
        SystemExit: if the command fails.
    """
    if prologue:
        print(prologue)
    try:
        subprocess.run(command, shell=True, check=True)
    except subprocess.CalledProcessError:
        print(error_message)
        sys.exit(1)
    if epilogue:
        print(epilogue)


def inject(text: str, check: str, to: str) -> None:
    """Inject the given text string into the specified file if the
    file doesn't contain the check string.

    Raises:
        AssertionError: if the text param does not contain the check param
        FileNotFoundError: if the file does not exist
    """
    dedented = textwrap.dedent(text)
    indented = textwrap.indent(dedented, "  ")

    assert check in dedented

    if os.path.isfile(to):
        with open(to, "r") as f:
            if check in f.read():
                return
        with open(to, "a") as f:
            f.write(dedented)
            print(f"Append to {to}:\n{indented}")
    else:
        with open(to, "w") as f:
            f.write(dedented)
            print(f"Write to {to}:\n{indented}")


def setup_macos() -> None:
    if not shutil.which("brew"):
        execute(
            command="curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install | /usr/bin/ruby",
            prologue="Installing Homebrew.",
            epilogue="Installed Homebrew successfully.",
            error_message="Failed to install Homebrew."
        )
    else:
        print("Skipping install of Homebrew. It is already installed.")

    execute(
        command=f"brew bundle --file='{PROJECT_DIR}/Brewfile.macos'",
        prologue="Installing dependencies using Homebrew Bundle.",
        epilogue="Installed dependencies successfully.",
        error_message="Failed to install dependencies."
    )

    execute(
        command="open -a Docker",
        prologue="Open Docker.app to install docker-compose",
        error_message="Failed to open Docker.app"
    )

    shell = os.getenv("SHELL", "")
    if shell.endswith("bash"):
        inject(
            text=f"""
            # flywheel-jp/flywheel-standard start
            export FLYWHEEL_STANDARD_ROOT={PROJECT_DIR}
            if [ -f "$FLYWHEEL_STANDARD_ROOT/config/config.bash" ]; then
              source "$FLYWHEEL_STANDARD_ROOT/config/config.bash"
            fi
            # flywheel-jp/flywheel-standard end
            """,
            check="# flywheel-jp/flywheel-standard",
            to=os.path.expanduser("~/.bash_profile")
        )
    elif shell.endswith("zsh"):
        inject(
            text=f"""
            # flywheel-jp/flywheel-standard start
            export FLYWHEEL_STANDARD_ROOT={PROJECT_DIR}
            if [ -f "$FLYWHEEL_STANDARD_ROOT/config/config.zsh" ]; then
              source "$FLYWHEEL_STANDARD_ROOT/config/config.zsh"
            fi
            # flywheel-jp/flywheel-standard end
            """,
            check="# flywheel-jp/flywheel-standard",
            to=os.path.expanduser("~/.zprofile")
        )
    elif shell.endswith("fish"):
        config_home = os.getenv("XDG_CONFIG_HOME", "~/.config")
        conf_d = os.path.expanduser(f"{config_home}/fish/conf.d")
        os.makedirs(conf_d, exist_ok=True)
        inject(
            text=f"""
            set -x FLYWHEEL_STANDARD_ROOT {PROJECT_DIR}
            if test -e "$FLYWHEEL_STANDARD_ROOT/config/config.fish"
              source "$FLYWHEEL_STANDARD_ROOT/config/config.fish"
            end
            """,
            check="",
            to=f"{conf_d}/flywheel_standard.fish"
        )
    else:
        print(f"Unsupported shell: {shell}")
        sys.exit(1)


if __name__ == "__main__":
    system = platform.system()
    if system == "Darwin":
        setup_macos()
    else:
        print(f"Unsupported system: {system}")
        sys.exit(1)
